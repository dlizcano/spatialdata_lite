install.packages("rgbif")
library(rgbif)
knitr::opts_chunk$set(echo = TRUE)
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
library(scrubr)
library(maps)
# IF YOU HAVE ONLY ONE SPECIES ----
myspecies <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)
# take a look at the downloaded data:
gbif_data
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000, decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
gbif_data
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)
# take a look at the downloaded data:
gbif_data
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)#, decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
gbif_data
# get the DOIs for citing these data properly:
gbif_citation(gbif_data)
# note: if you need or prefer only one DOI for the entire dataset, download the dataset directly from www.gbif.org and then import the .csv to R. It is very important to properly cite the data sources! GBIF is not a source, just a repository for many people who put in very hard work to collect these data and make them available
# check how the data are organized:
names(gbif_data)
names(gbif_data$meta)
names(gbif_data$data)
# get the columns that matter for mapping and cleaning the occurrence data:
myspecies_coords <- gbif_data$data[ , c("decimalLongitude", "decimalLatitude", "individualCount", "occurrenceStatus", "coordinateUncertaintyInMeters", "institutionCode", "references")]
head(myspecies_coords)
# map the occurrence data:
map("world", xlim = range(myspecies_coords$decimalLongitude), ylim = range(myspecies_coords$decimalLatitude))  # if the map doesn't appear right at first, run this command again
points(myspecies_coords[ , c("decimalLongitude", "decimalLatitude")], pch = ".")
map("world", xlim = range(myspecies_coords$decimalLongitude), ylim = range(myspecies_coords$decimalLatitude))  # if the map doesn't appear right at first, run this command again
points(myspecies_coords[ , c("decimalLongitude", "decimalLatitude")], pch = ".")
range(myspecies_coords$decimalLongitude), ylim = range(myspecies_coords$decimalLatitude)
max(myspecies_coords$decimalLongitude)
min(myspecies_coords$decimalLongitude)
min(myspecies_coords$decimalLatitude)
max(myspecies_coords$decimalLatitude)
gbif_data
View(gbif_data)
View(gbif_data$data)
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000, decimalLatitude = "0.996444, 5")#decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000, decimalLatitude = "0.996444, 5")#decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
gbif_data
# note: if you need or prefer only one DOI for the entire dataset, download the dataset directly from www.gbif.org and then import the .csv to R. It is very important to properly cite the data sources! GBIF is not a source, just a repository for many people who put in very hard work to collect these data and make them available
# check how the data are organized:
names(gbif_data)
names(gbif_data$meta)
names(gbif_data$data)
# get the columns that matter for mapping and cleaning the occurrence data:
myspecies_coords <- gbif_data$data[ , c("decimalLongitude", "decimalLatitude", "individualCount", "occurrenceStatus", "coordinateUncertaintyInMeters", "institutionCode", "references")]
head(myspecies_coords)
# map the occurrence data:
map("world", xlim = range(myspecies_coords$decimalLongitude), ylim = range(myspecies_coords$decimalLatitude))  # if the map doesn't appear right at first, run this command again
points(myspecies_coords[ , c("decimalLongitude", "decimalLatitude")], pch = ".")
map("world", xlim = range(myspecies_coords$decimalLongitude), ylim = range(myspecies_coords$decimalLatitude))  # if the map doesn't appear right at first, run this command again
points(myspecies_coords[ , c("decimalLongitude", "decimalLatitude")], pch = ".")
gbif_data$data
View(gbif_data$data)
unique( gbif_data$data$stateProvince
)
gbif_data
plot(gbif_data)
# note: if you need or prefer only one DOI for the entire dataset, download the dataset directly from www.gbif.org and then import the .csv to R. It is very important to properly cite the data sources! GBIF is not a source, just a repository for many people who put in very hard work to collect these data and make them available
# check how the data are organized:
names(gbif_data)
names(gbif_data$meta)
names(gbif_data$data)
# create a table with the downloaded data:
dat <- gbif_data$data
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
# IF YOU HAVE ONLY ONE SPECIES ----
myspecies <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)
# create a table with the downloaded data:
dat <- gbif_data$data
head(dat)
length(unique(dat$year))
length(unique(dat$stateProvince))
length(unique(dat$stateProvince))
unique(dat$stateProvince)
table(dat$publishingCountry)
summary(dat)
unique(dat$stateProvince)
datthous <- filter(dat, stateProvince == c("Risaralda", "Quindío", "Caldas", "Tolima"))
library(dplyr)
datthous <- filter(dat, stateProvince == c("Risaralda", "Quindío", "Caldas", "Tolima"))
head(datthous)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)
gbif_data
# con inner_join no es necesario especificar la columna en común
dat_oso_danta <- cbind(gbif_data_sp1, gbif_data_sp2)
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# con inner_join no es necesario especificar la columna en común
dat_oso_danta <- cbind(gbif_data_sp1, gbif_data_sp2)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# con inner_join no es necesario especificar la columna en común
dat_oso_danta <- cbind(gbif_data_sp1, gbif_data_sp2)
ggplot(dat_oso_danta) +
aes(x = year) +
geom_histogram()
library(ggplot2)
ggplot(dat_oso_danta) +
aes(x = year) +
geom_histogram()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rgbif)
head(dat_sp1)
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# create a table with the downloaded data:
dat_sp1 <- gbif_data_sp1$data
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
colombia_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000, decimalLatitude = "0.996444, 5")#decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
# gbif_data
# get the DOIs for citing these data properly:
gbif_citation(gbif_data)
# note: if you need or prefer only one DOI for the entire dataset, download the dataset directly from www.gbif.org and then import the .csv to R. It is very important to properly cite the data sources! GBIF is not a source, just a repository for many people who put in very hard work to collect these data and make them available
head(dat_sp1)
tail(dat_sp1)
#ver los datos de la tabla
View(dat_sp1)
names(dat_sp1)
nrow(dat_sp1)
ncol(dat_sp1)
length(unique(dat_sp1$stateProvince))
unique(dat_sp1$stateProvince)
length(unique(dat_sp1$year))
unique(dat_sp1$year)
table(dat_sp1$publishingCountry)
# summary(dat)
dat_sp2 <- gbif_data_sp2$data
# con inner_join no es necesario especificar la columna en común
dat_oso_danta <- cbind(dat_sp1, dat_sp2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rgbif)
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# create a table with the downloaded data:
dat_sp1 <- gbif_data_sp1$data
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
colombia_data <- occ_data(scientificName = myspecies, hasCoordinate = TRUE, limit = 20000, decimalLatitude = "0.996444, 5")#decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
# gbif_data
# get the DOIs for citing these data properly:
# gbif_citation(gbif_data)
# note: if you need or prefer only one DOI for the entire dataset, download the dataset directly from www.gbif.org and then import the .csv to R. It is very important to properly cite the data sources! GBIF is not a source, just a repository for many people who put in very hard work to collect these data and make them available
head(dat_sp1)
tail(dat_sp1)
#ver los datos de la tabla
View(dat_sp1)
names(dat_sp1)
nrow(dat_sp1)
ncol(dat_sp1)
length(unique(dat_sp1$stateProvince))
unique(dat_sp1$stateProvince)
length(unique(dat_sp1$year))
unique(dat_sp1$year)
table(dat_sp1$publishingCountry)
# summary(dat)
library(dplyr)
#| warning: false
dat_nevados <- filter(dat_sp1, stateProvince == c("Risaralda", "Quindío", "Caldas", "Tolima"))
head(dat_nevados)
# get the columns that matter for mapping and cleaning the occurrence data:
sp1_coords <- gbif_data$data[ , c("scientificName", "decimalLongitude", "decimalLatitude", "individualCount", "occurrenceStatus", "coordinateUncertaintyInMeters", "institutionCode", "references")]
head(sp1_coords)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
# save to table
dat_sp2 <- gbif_data_sp2$data
# con inner_join no es necesario especificar la columna en común
dat_oso_danta <- cbind(dat_sp1, dat_sp2)
dim(dat_sp1)
dim(dat_sp2)
View(gbif_data_sp2$data)
dat_oso_danta  <- left_join(x = gbif_data_sp1, y = gbif_data_sp2)
dat_oso_danta  <- left_join(x = dat_sp1, y = dat_sp2)
ggplot(dat_oso_danta) +
aes(x = year) +
geom_histogram()
ggplot(dat_oso_danta) +
aes(x = year, fill = scientificName) +
geom_histogram()
ggplot(dat_oso_danta) +
aes(x = year, fill = scientificName) +
geom_histogram()
dat_sp2$scientificName
unique(dat_oso_danta$scientificName)
dat_oso_danta  <- left_join(x = dat_sp2, y = dat_sp1)
unique(dat_oso_danta$scientificName)
dat_oso_danta$specificEpithet
dat_oso_danta  <- full_join(x = dat_sp2, y = dat_sp1)
unique(dat_oso_danta$scientificName)
dat_oso_danta  <- full_join(x = dat_sp2, y = dat_sp1)
ggplot(dat_oso_danta) +
aes(x = year, fill = scientificName) +
geom_histogram()
ggplot(dat_oso_danta) +
aes(x = decimalongitude, y = decimalLatitude, color = scientificName) +
geom_point()
ggplot(dat_oso_danta) +
aes(x = decimalLongitude, y = decimalLatitude, color = scientificName) +
geom_point()
unique(dat_oso_danta$scientificName)
dat_oso_danta_filtrado <- dat_oso_danta %>% filter(scientificName == c("Tremarctos ornatus (F.G.Cuvier, 1825)", "Tapirus pinchaque (Roulin, 1829)"))
ggplot(dat_oso_danta_filtrado) +
aes(x = decimalLongitude, y = decimalLatitude, color = scientificName) +
geom_point()
dat_oso_danta_filtrado <- dat_oso_danta %>%
filter(scientificName == c("Tremarctos ornatus (F.G.Cuvier, 1825)", "Tapirus pinchaque (Roulin, 1829)")) %>%
filter(decimalLatitude <= 20 & decimalLatitude >= -20)
ggplot(dat_oso_danta_filtrado) +
aes(x = decimalLongitude, y = decimalLatitude, color = scientificName) +
geom_point()
dat_oso_danta_filtrado$stateProvince
datg <- group_by(dat_oso_danta_filtrado, stateProvince)
datg
datg$municipality
datg$elevation
(dat_elev_sum <-
summarize(datg,
mean_elev = mean(elevation),
sd_elev = sd(elevation),
n = n()))
dat_oso_danta_filtrado %>%
group_by(stateProvince) %>%
summarize(mean_elev  = mean(elevation),
sd_elev = sd(elevation),
n = n()) %>%
ungroup() %>%
ggplot(aes(x = stateProvince, y = mean_elev)) +
geom_linerange(aes(ymin = mean_elev - sd_elev, ymax = mean_elev + sd_elev)) +
geom_point()
dat_elev_sum <-
dat_oso_danta_filtrado %>%
group_by(scientificName) %>%
summarize(mean_elev  = mean(elevation),
sd_elev = sd(elevation),
n = n())
dat_oso_danta_filtrado %>%
group_by(scientificName) %>%
summarize(mean_elev  = mean(elevation),
sd_elev = sd(elevation),
n = n()) %>%
ungroup() %>%
ggplot(aes(x = scientificName, y = mean_elev)) +
geom_linerange(aes(ymin = mean_elev - sd_elev, ymax = mean_elev + sd_elev)) +
geom_point()
dat_oso_danta_filtrado %>%
group_by(scientificName) %>%
summarize(mean_elev  = mean(elevation, na.rm=T),
sd_elev = sd(elevation, na.rm=T),
n = n()) %>%
ungroup() %>%
ggplot(aes(x = scientificName, y = mean_elev)) +
geom_linerange(aes(ymin = mean_elev - sd_elev, ymax = mean_elev + sd_elev)) +
geom_point()
dat_elev_sum <-
dat_oso_danta_filtrado %>%
group_by(scientificName) %>%
summarize(mean_elev  = mean(elevation),
sd_elev = sd(elevation),
n = n())
dat_elev_sum <-
dat_oso_danta_filtrado %>%
group_by(scientificName) %>%
summarize(mean_elev  = mean(elevation, na.rm=T),
sd_elev = sd(elevation, na.rm=T),
n = n())
dat_per_year<-dat_oso_danta_filtrado %>%
group_by(year,basisOfRecord) %>%
summarize(n = n()) %>%
filter(year > 1949)
p1<-ggplot(dat_per_year, aes(x=year, y=n,color = basisOfRecord)) +
geom_line(size = 1)
p1
p2<-p1 +
geom_vline(xintercept = 2015,colour="black", linetype = "longdash")
p2
p2<-p1 +
geom_vline(xintercept = 2016,colour="black", linetype = "longdash")
p2
p3<-p2 +
annotate("text", label = "2016", x = 2017, y = 300, size = 4, colour = "black")
p3
p3<-p2 +
annotate("text", label = "2016", x = 2017, y = 1200, size = 4, colour = "black")
p3
p3<-p2 +
annotate("text", label = "2016", x = 2017, y = 1300, size = 4, colour = "black")
p3
e1<-p3 +
theme_bw()+
theme(legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 14),
text = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
ylab("# registros")+
ggtitle("Número de registros de mamíferos")
e1
e1<-p3 +
theme_bw()+
theme(legend.position = "left",
legend.title = element_blank(),
legend.text = element_text(size = 14),
text = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
ylab("# registros")+
ggtitle("Número de registros de danta y oso")
e1
e1<-p3 +
theme_bw()+
theme(legend.position = "rogth",
legend.title = element_blank(),
legend.text = element_text(size = 14),
text = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
ylab("# registros")+
ggtitle("Número de registros de danta y oso")
e1
e1<-p3 +
theme_bw()+
theme(legend.position = "rigth",
legend.title = element_blank(),
legend.text = element_text(size = 14),
text = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
ylab("# registros")+
ggtitle("Número de registros de danta y oso")
e1
e1<-p3 +
theme_bw()+
theme(legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 14),
text = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12))+
ylab("# registros")+
ggtitle("Número de registros de danta y oso")
e1
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rgbif)
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# create a table with the downloaded data:
dat_sp1 <- gbif_data_sp1$data
# if "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# if your species is widespread but you want to work on a particular region, you can download records within a specified window of coordinates:
colombia_data <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000, decimalLatitude = "0.996444, 5")#decimalLongitude = "-10, 10", decimalLatitude = "35, 55")  # note that coordinate ranges must be specified this way: "smaller, larger" (e.g. "-5, -2")
# gbif_data
# get the DOIs for citing these data properly:
# gbif_citation(gbif_data)
# note: if you need or prefer only one DOI for the entire dataset, download the dataset directly from www.gbif.org and then import the .csv to R. It is very important to properly cite the data sources! GBIF is not a source, just a repository for many people who put in very hard work to collect these data and make them available
saveRDS(data/dat_sp1)
saveRDS(dat_sp1, "data/dat_sp1")
saveRDS(dat_sp2, "data/dat_sp1")
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
knitr::opts_chunk$set(echo = TRUE)
#######################################
## DOWNLOAD AND CLEAN DATA FROM GBIF ##
#######################################
library(rgbif)
# IF YOU HAVE ONLY ONE SPECIES ----
species1 <- c("Tapirus pinchaque")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp1 <- occ_data(scientificName = species1, hasCoordinate = TRUE, limit = 20000)
# create a table with the downloaded data:
dat_sp1 <- gbif_data_sp1$data
#| warning: false
dat_nevados <- filter(dat_sp1, stateProvince == c("Risaralda", "Quindío", "Caldas", "Tolima"))
# create a table with the downloaded data:
dat_sp1 <- gbif_data_sp1$data
gbif_data_sp1$data
#| warning: false
dat_nevados <- filter(dat_sp1, stateProvince == c("Risaralda", "Quindío", "Caldas", "Tolima"))
class(dat_sp1)
#| warning: false
dat_nevados <- dplyr::filter(dat_sp1, stateProvince == c("Risaralda", "Quindío", "Caldas", "Tolima"))
species2 <- c("Tremarctos ornatus")
# download GBIF occurrence data for this species; this takes time if there are many data points!
gbif_data_sp2 <- occ_data(scientificName = species2, hasCoordinate = TRUE, limit = 20000)
# save to table
dat_sp2 <- gbif_data_sp2$data
saveRDS(dat_sp2, "data/dat_sp2")
